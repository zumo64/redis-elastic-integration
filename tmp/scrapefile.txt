# Scrape Zone


curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.9.0-linux-x86_64.tar.gz
tar xzvf elastic-agent-8.9.0-linux-x86_64.tar.gz
cd elastic-agent-8.9.0-linux-x86_64
sudo ./elastic-agent install --non-interactive
/home/agent/elastic-agent-8.9.0-linux-x86_64/elastic-agent run -c ./elastic-agent.yml &;


curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.9.0-linux-x86_64.tar.gz
tar xzvf elastic-agent-8.9.0-linux-x86_64.tar.gz
cd elastic-agent-8.9.0-linux-x86_64
sudo ./elastic-agent install --url=https://fleetserver:443 --enrollment-token=UlhfV1hJb0JJZ19uTi1Wb2J3WnA6MFp4MjI4NE5UUWVralp3VWZZZTlpZw==

echo -n 'Line of text' | nc -v localhost 50000


 	  - FLEET_ENROLLMENT_TOKEN=UlhfV1hJb0JJZ19uTi1Wb2J3WnA6MFp4MjI4NE5UUWVralp3VWZZZTlpZw==
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleetserver:443
      - ELASTICSEARCH_HOST=https://es01:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=password

            - ELASTICSEARCH_HOST=https://es01:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=password
      - ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt



 fleetserver:
    image: docker.elastic.co/beats/elastic-agent:8.9.1 
    container_name: fleetserver
    depends_on:
      es01:
        condition: service_healthy
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    environment:
      - FLEET_SERVER_ENABLE=true 
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_SERVICE_TOKEN=AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2OTM4Mjk5MTA0MzY6VzVPOU1uelBTWWFCeHlDNmQwYUIwQQ
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - FLEET_SERVER_PORT=8220
      - FLEET_ENROLLMENT_TOKEN=MTV0VFlZb0JqYjdzOEQwNnh2VUQ6VVAzUjFNYzFSM1NfZUpwWkxGUWxydw==
      - FLEET_ENROLL=1
    ports:
      - 8220:8220
    volumes:
      - certs:/usr/share/elastic-agent/certs


            - FLEET_SERVER_ELASTICSEARCH_CA_TRUSTED_FINGERPRINT=DD:64:98:D6:DA:8E:32:5D:91:63:3B:C5:94:21:96:55:AE:1D:78:D5:F0:C6:1C:CD:08:F1:31:42:84:63:FA:62


            openssl x509 -fingerprint -sha256 -in ./certs/es01/es01.crt -outform DER | openssl dgst -sha256 -hex
(stdin)= 0a325fe1cac5c8a1dfa4eacca6907185d79c8609294874ce872981801d554962

# curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.8.0-linux-x86_64.tar.gz
tar xzvf elastic-agent-8.8.0-linux-x86_64.tar.gz
cd elastic-agent-8.8.0-linux-x86_64
sudo ./elastic-agent install --url=https://$IP:8220 \
  --fleet-server-es=https://$IP:9200 \
  --fleet-server-service-token=$SERVICE_TOKEN \
  --fleet-server-policy=fleet-server-policy \
  --fleet-server-es-ca-trusted-fingerprint=$ES_FINGERPRINT \
  --certificate-authorities=/tmp/ca/ca.crt \
  --fleet-server-cert=/tmp/fleet-server/fleet-server.crt \
  --fleet-server-cert-key=/tmp/fleet-server/fleet-server.key \
  --fleet-server-port=8220
(stdin)= eab2c5710a3520f0c085966142a7d9d11000a5feb2f001cc0afeb535e9011f87


 user: root # note, synthetic browser monitors require this set to `elastic-agent`
    environment:
      - FLEET_SERVER_ENABLE=1
      - ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#      - FLEET_SERVER_CERT=/usr/share/elastic-agent/config/certs/fleet/fleetserver.crt
#      - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/config/certs/fleet/fleetserver.key
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_SERVICE_TOKEN=AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2OTM4NTY3NTA1OTk6YmhiWms3ZkhRQ0NYckhqZUFSbFN5Zw
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_ENROLLMENT_TOKEN=MTV0VFlZb0JqYjdzOEQwNnh2VUQ6VVAzUjFNYzFSM1NfZUpwWkxGUWxydw==
      - FLEET_ENROLL=1
      - FLEET_SERVER_INSECURE_HTTP=true
 # #     - FLEET_SERVER_ELASTICSEARCH_CA_TRUSTED_FINGERPRINT=0a325fe1cac5c8a1dfa4eacca6907185d79c8609294874ce872981801d554962
 #     - FLEET_SERVER_HOST=https://fleetserver:8220
 #     - FLEET_SERVER_PORT=8220
 #     - KIBANA_FLEET_HOST=http://kibana:5601



 curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.8.0-linux-x86_64.tar.gz
tar xzvf elastic-agent-8.8.0-linux-x86_64.tar.gz
cd elastic-agent-8.8.0-linux-x86_64
sudo ./elastic-agent install --url=https://$IP:8220 \
  --fleet-server-es=https://$IP:9200 \
  --fleet-server-service-token=$SERVICE_TOKEN \
  --fleet-server-policy=fleet-server-policy \
  --fleet-server-es-ca-trusted-fingerprint=$ES_FINGERPRINT \
  --certificate-authorities=/tmp/ca/ca.crt \
  --fleet-server-cert=/tmp/fleet-server/fleet-server.crt \
  --fleet-server-cert-key=/tmp/fleet-server/fleet-server.key \
  --fleet-server-port=8220


  sh-5.0$ openssl x509 -fingerprint -sha256 -in ./config/certs/ca/ca.crt -outform DER | openssl dgst -sha256 -hex
(stdin)= eab2c5710a3520f0c085966142a7d9d11000a5feb2f001cc0afeb535e9011f87



 fleetserver:
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: fleetserver
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    environment:
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}"
      - FLEET_SERVER_SERVICE_TOKEN=AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2OTM5MDY1MTc2Mzc6QXNnS1ZXQWZSV3lNT0puT3I4Tk1UQQ
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_SERVER_ELASTICSEARCH_CA_TRUSTED_FINGERPRINT=eab2c5710a3520f0c085966142a7d9d11000a5feb2f001cc0afeb535e9011f87
      - FLEET_ENROLL=1
      - FLEET_ENROLLMENT_TOKEN=cmJxc1pJb0JvcFBpMWdZZE9nbGw6Tzk5bTdITWhRcWllaVZFMURrRlhrdw==      
      - FLEET_URL=https://fleetserver:8220
      - FLEET_SERVER_INSECURE_HTTP=1
      - FLEET_SERVER_PORT=8220
      - FLEET_SERVER_CERT=/usr/share/elastic-agent/certs/fleetserver/fleetserver.crt
      - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/fleetserver/fleetserver.key
    ports:
      - 8220:8220
    volumes:
      - certs:/usr/share/elastic-agent/certs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I --cacert config/certs/ca/ca.crt https://fleet:8220 | grep -q 'HTTP/2 404'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120





# curl --cacert /usr/share/elastic-agent/certs/ca/ca.crt -u elastic:password  https://es01:9200
{
  "name" : "es01",
  "cluster_name" : "docker-cluster",
  "cluster_uuid" : "WA1UIjJGQeiaxltN3B4QrA",
  "version" : {
    "number" : "8.9.1",
    "build_flavor" : "default",
    "build_type" : "docker",
    "build_hash" : "a813d015ef1826148d9d389bd1c0d781c6e349f0",
    "build_date" : "2023-08-10T05:02:32.517455352Z",
    "build_snapshot" : false,
    "lucene_version" : "9.7.0",
    "minimum_wire_compatibility_version" : "7.17.0",
    "minimum_index_compatibility_version" : "7.0.0"
  },
  "tagline" : "You Know, for Search"
}


/usr/share/elastic-agent/elastic-agent status



[
  {
    "_source": {
      "message": "{\"ts\":1694700257,\"new_int_conn\":{\"id\":1000000044210001002 ,\"srcip\":\"127.0.0.1\",\"srcp\":\"45686\",\"trgip\":\"127.0.0.1\",\"trgp\":\"3333\",\"hname\":\"\",\"bdb_name\":\"zumo-test-db1\",\"bdb_uid\":\"1\"}}"
    }
  }
]



[
  {
    "_source": {
    "message":"{\"ts\":1655821384,\"action\":\"auth\",\"id\":2285001002 ,\"srcip\":\"127.0.0.1\",\"srcp\":\"39338\",\"trgip\":\"127.0.0.1\",\"trgp\":\"12635\",\"hname\":\"\",\"bdb_name\":\"DB1\",\"bdb_uid\":\"5\",\"status\":2,\"username\":\"user_one\",\"identity\":\"user:1\",\"acl-rules\":\"~* +@all\"}"
    }    
  }
]






---------------
painless script

void renameField(def ctx, def old, def newF) {
   def names = old.splitOnToken(".");
   def value = ctx[names[0]][names[1]];
   ctx[newF] = value ;
}

def fields = ctx.keySet();
def type = null;

for (field in fields) {

  if (field.contains("new_int_conn")) {
    type = "Internal Connection";
    
    renameField(ctx,"new_int_conn.id","proxy_connection_id");
    renameField(ctx,"new_int_conn.srcip","srcip");
    renameField(ctx,"new_int_conn.srcp","srcp");
    renameField(ctx,"new_int_conn.trgip","trgip");
    renameField(ctx,"new_int_conn.trgp","trgp");
    renameField(ctx,"new_int_conn.hname","hname");
    renameField(ctx,"new_int_conn.bdb_name","bdb_name");
    renameField(ctx,"new_int_conn.bdb_uid","bdb_uid");
    break;
  }
  else if (field.contains("new_conn")) {
    type = "External Connection";
   
    renameField(ctx,"new_conn.id","proxy_connection_id");
    renameField(ctx,"new_conn.srcip","srcip");
    renameField(ctx,"new_conn.srcp","srcp");
    renameField(ctx,"new_conn.trgip","trgip");
    renameField(ctx,"new_conn.trgp","trgp");
    renameField(ctx,"new_conn.hname","hname");
    renameField(ctx,"new_conn.bdb_name","bdb_name");
    renameField(ctx,"new_conn.bdb_uid","bdb_uid");

    break;
  }
  else if (field.contains("close_conn")) {
    type = "Close Connection";
   
    renameField(ctx,"close_conn.id","proxy_connection_id");
    renameField(ctx,"close_conn.srcip","srcip");
    renameField(ctx,"close_conn.srcp","srcp");
    renameField(ctx,"close_conn.trgip","trgip");
    renameField(ctx,"close_conn.trgp","trgp");
    renameField(ctx,"close_conn.hname","hname");
    renameField(ctx,"close_conn.bdb_name","bdb_name");
    renameField(ctx,"close_conn.bdb_uid","bdb_uid");
    break;
  }
  else if (field.contains("action")) {
    type = "Auth";
    
    def value = ctx["id"];
    ctx["proxy_connection_id"] = value ;
    break;
  }
  
}

fields = null;

if (type == "Internal Connection" ) {
  ctx.entrySet().removeIf(e -> e.getKey() =~ /new_int_conn.*/);
}
else  if (type == "External Connection" ) {
  ctx.entrySet().removeIf(e -> e.getKey() =~ /new_conn.*/);
}
else if (type == "Close Connection" ) {
  ctx.entrySet().removeIf(e -> e.getKey() =~ /close_conn.*/);
}

ctx["redis_audit_event_type"] = type;


--------
Hed
number of connections by IP 
how many connections we have from this IP at a certain time


Bonjour Madame Haristoy,

Le 1404 dernier j'étais passé avec ma mère  et ma femme pour signer  une procuration pour que ma mère Elsa Zumbiehl puisse accéder à mon coffre que je loue à l'agence de Biarritz.
Je viens de recevoir une lettre de l'agence de Biarritz me disant que le Mandat de procuration n'est   pas conforme au motif  "Mandat non régularisé depuis 105 jours" 

Pour votre info, Nous avions fait une première procuration l'année dernière qui avait été également invalidée. Est ce que cette lettre fait référence à cette première procuration ?   

Pourriez vous s'il vous plait me confirmer que ma mère et ma femme (Isabelle de Langeron) ont bien accès au coffre ? 

ci joint un scan de la lettre que j'ai reçue hier..
Merci d'avance pour votre aide,

Christian




PIPELINE 

[
  {
    "json": {
      "field": "message",
      "add_to_root": true
    }
  },
  {
    "script": {
      "lang": "painless",
      "source": "\nvoid renameField(def ctx, def old, def newF) {\n   def names = old.splitOnToken(\".\");\n   def value = ctx[names[0]][names[1]];\n   ctx[newF] = value ;\n}\n\ndef fields = ctx.keySet();\ndef type = null;\n\nfor (field in fields) {\n\n  if (field.contains(\"new_int_conn\")) {\n    type = \"Internal Connection\";\n    \n    renameField(ctx,\"new_int_conn.id\",\"proxy_connection_id\");\n    renameField(ctx,\"new_int_conn.srcip\",\"srcip\");\n    renameField(ctx,\"new_int_conn.srcp\",\"srcp\");\n    renameField(ctx,\"new_int_conn.trgip\",\"trgip\");\n    renameField(ctx,\"new_int_conn.trgp\",\"trgp\");\n    renameField(ctx,\"new_int_conn.hname\",\"hname\");\n    renameField(ctx,\"new_int_conn.bdb_name\",\"bdb_name\");\n    renameField(ctx,\"new_int_conn.bdb_uid\",\"bdb_uid\");\n    break;\n  }\n  else if (field.contains(\"new_conn\")) {\n    type = \"External Connection\";\n   \n    renameField(ctx,\"new_conn.id\",\"proxy_connection_id\");\n    renameField(ctx,\"new_conn.srcip\",\"srcip\");\n    renameField(ctx,\"new_conn.srcp\",\"srcp\");\n    renameField(ctx,\"new_conn.trgip\",\"trgip\");\n    renameField(ctx,\"new_conn.trgp\",\"trgp\");\n    renameField(ctx,\"new_conn.hname\",\"hname\");\n    renameField(ctx,\"new_conn.bdb_name\",\"bdb_name\");\n    renameField(ctx,\"new_conn.bdb_uid\",\"bdb_uid\");\n\n    break;\n  }\n  else if (field.contains(\"close_conn\")) {\n    type = \"Close Connection\";\n   \n    renameField(ctx,\"close_conn.id\",\"proxy_connection_id\");\n    renameField(ctx,\"close_conn.srcip\",\"srcip\");\n    renameField(ctx,\"close_conn.srcp\",\"srcp\");\n    renameField(ctx,\"close_conn.trgip\",\"trgip\");\n    renameField(ctx,\"close_conn.trgp\",\"trgp\");\n    renameField(ctx,\"close_conn.hname\",\"hname\");\n    renameField(ctx,\"close_conn.bdb_name\",\"bdb_name\");\n    renameField(ctx,\"close_conn.bdb_uid\",\"bdb_uid\");\n    break;\n  }\n  else if (field.contains(\"action\")) {\n    type = \"Auth\";\n    \n    def value = ctx[\"id\"];\n    ctx[\"proxy_connection_id\"] = value ;\n    break;\n  }\n  \n}\n\nfields = null;\n\nif (type == \"Internal Connection\" ) {\n  ctx.entrySet().removeIf(e -> e.getKey() =~ /new_int_conn.*/);\n}\nelse  if (type == \"External Connection\" ) {\n  ctx.entrySet().removeIf(e -> e.getKey() =~ /new_conn.*/);\n}\nelse if (type == \"Close Connection\" ) {\n  ctx.entrySet().removeIf(e -> e.getKey() =~ /close_conn.*/);\n}\n\nctx[\"redis_audit_event_type\"] = type;\n         "
    }
  },
  {
    "date": {
      "field": "ts",
      "formats": [
        "UNIX"
      ]
    }
  }
]



TRANSFORM 

Preview
{
  "id": "redis_audit_logs_connection_times_cont",
  "authorization": {
    "roles": [
      "superuser"
    ]
  },
  "version": "8.9.1",
  "create_time": 1694947696144,
  "source": {
    "index": [
      "logs-*"
    ],
    "query": {
      "bool": {
        "filter": [
          {
            "bool": {
              "filter": [
                {
                  "bool": {
                    "must": [],
                    "filter": [
                      {
                        "bool": {
                          "should": [
                            {
                              "term": {
                                "data_stream.dataset": {
                                  "value": "tcp.generic"
                                }
                              }
                            }
                          ],
                          "minimum_should_match": 1
                        }
                      }
                    ],
                    "should": [],
                    "must_not": []
                  }
                }
              ]
            }
          }
        ]
      }
    }
  },
  "dest": {
    "index": "redis_audit_logs_connection_time_spans"
  },
  "sync": {
    "time": {
      "field": "@timestamp",
      "delay": "60s"
    }
  },
  "pivot": {
    "group_by": {
      "proxy_connection_id": {
        "terms": {
          "field": "proxy_connection_id"
        }
      },
      "srcip": {
        "terms": {
          "field": "srcip"
        }
      }
    },
    "aggregations": {
      "@timestamp.min": {
        "min": {
          "field": "@timestamp"
        }
      },
      "@timestamp.max": {
        "max": {
          "field": "@timestamp"
        }
      }
    }
  },
  "description": "Track the min - max times for each connection",
  "settings": {}
}

 


18/09/2023

PUT _transform/redis-external-connections_v2
{

  "source": {
    "index": [
      "logs-*"
    ],
    "query": {
      "bool": {
        "filter": [
          {
            "bool": {
              "filter": [
                {
                  "bool": {
                    "must": [],
                    "filter": [
                      {
                        "bool": {
                          "should": [
                            {
                              "term": {
                                "data_stream.dataset": {
                                  "value": "tcp.generic"
                                }
                              }
                            }
                          ],
                          "minimum_should_match": 1
                        }
                      }
                    ],
                    "should": [],
                    "must_not": [
                      {
                        "match_phrase": {
                          "redis_audit_event_type": "Internal Connection"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  },
  "dest": {
    "index": "redis-external-connections"
  },
  "sync": {
    "time": {
      "field": "@timestamp",
      "delay": "60s"
    }
  },
  "pivot": {
    "group_by": {
      "proxy_connection_id": {
        "terms": {
          "field": "proxy_connection_id"
        }
      },
      "bdb_name": {
        "terms": {
          "field": "bdb_name"
        }
      },
      "srcip": {
        "terms": {
          "field": "srcip"
        }
      },
      "srcp": {
        "terms": {
          "field": "srcp"
        }
      }
    },
    "aggregations": {
      "@timestamp.max": {
        "max": {
          "field": "@timestamp"
        }
      },
      "@timestamp.min": {
        "min": {
          "field": "@timestamp"
        }
      },
      "redis_audit_event_type.cardinality": {
        "cardinality": {
          "field": "redis_audit_event_type"
        }
      },
      "redis_audit_event_type.terms": {
        "terms": {
          "field": "redis_audit_event_type",
          "size": 3
        }
      }
    }
  },
  "description": "tracks external connections time spans with event types",
  "settings": {}
}

Connextion  open at a given time
@timestamp.max >= "2023-09-18T15:16:00.000"


# edit witout vi
cat <<- "EOF" > file.txt //
// paste edited content
EOF

curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://localhost:5601/_security/api_key --data "@/tmp/api_key.json"



output=$(curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/api_key --data "@/tmp/api-key.json") && id=$(echo $output |  grep -o '"id":"[^"]*' | awk -F ':"' '{print $2}') && apikey=$(echo $output | grep -o '"api_key":"[^"]*' | awk -F ':"' '{print $2}') && api_key="$id:$apikey" && sed -i "0,/APIKEY/s//$api_key/"


echo "Creating audit agent API Key and applying changes to Audit agent yml ";
output=$(curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type:application/json" https://es01:9200/_security/api_key --data "@/tmp/api_key.json") && id=$(echo $output |  grep -o '"id":"[^"]*' | awk -F ':"' '{print $2}') && apikey=$(echo $output | grep -o '"api_key":"[^"]*' | awk -F ':"' '{print $2}') && api_key="$id:$apikey" && sed -i "0,/APIKEY/s//$api_key/" /tmp/agent-config/elastic-agent.yml;
        

| awk -F ":\"" "{print $$2}"